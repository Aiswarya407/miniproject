import os
from rembg import remove
from PIL import Image
from tqdm import tqdm
import shutil

# Paths
input_images_folder = r"D:\mini_coco\screw_dataset\images"
input_labels_folder = r"D:\mini_coco\screw_dataset\labels"
output_images_folder = r"D:\mini_coco\screw_output\images"
output_labels_folder = r"D:\mini_coco\screw_output\labels"
background_path = r"D:\mini_coco\screw_dataset\bg.jpg"

# Load background
background = Image.open(background_path).convert("RGBA")

# Ensure output folders exist
os.makedirs(output_images_folder, exist_ok=True)
os.makedirs(output_labels_folder, exist_ok=True)

# Process all images
for filename in tqdm(os.listdir(input_images_folder), desc="Processing Images"):
    if filename.endswith((".jpg", ".png", ".jpeg")):
        input_image_path = os.path.join(input_images_folder, filename)
        input_label_path = os.path.join(input_labels_folder, filename.replace(".jpg", ".txt"))

        output_image_path = os.path.join(output_images_folder, filename)
        output_label_path = os.path.join(output_labels_folder, filename.replace(".jpg", ".txt"))

        # Load screw image and remove background
        screw = Image.open(input_image_path).convert("RGBA")
        screw_no_bg = remove(screw)

        # Resize background to match original image size
        bg_width, bg_height = screw.size
        new_background = background.resize((bg_width, bg_height))

        # Resize screw if it's too large
        screw_width, screw_height = screw_no_bg.size
        if screw_width > bg_width * 0.6:  # If screw is too big, resize it
            scale_factor = 0.5
            screw_no_bg = screw_no_bg.resize(
                (int(screw_width * scale_factor), int(screw_height * scale_factor)), Image.Resampling.LANCZOS

            )
            screw_width, screw_height = screw_no_bg.size  # Update size

        # Compute new position: center-bottom placement
        x_offset = (bg_width - screw_width) // 2
        y_offset = bg_height - screw_height - 10  # Small margin from bottom

        # Overlay screw onto background
        final_image = new_background.copy()
        final_image.paste(screw_no_bg, (x_offset, y_offset), screw_no_bg)
        final_image.convert("RGB").save(output_image_path)

        # Update YOLO annotation file
        if os.path.exists(input_label_path):
            with open(input_label_path, "r") as f:
                lines = f.readlines()

            new_annotations = []
            for line in lines:
                cls, x_old, y_old, w_old, h_old = map(float, line.split())

                # Convert normalized coords to original image size
                x_old *= bg_width
                y_old *= bg_height
                w_old *= bg_width
                h_old *= bg_height

                # Adjust for new position
                x_new = (x_old - (bg_width / 2)) * scale_factor + (x_offset + screw_width / 2)
                y_new = (y_old - (bg_height / 2)) * scale_factor + (y_offset + screw_height / 2)
                w_new = w_old * scale_factor
                h_new = h_old * scale_factor

                # Convert back to normalized
                x_new /= bg_width
                y_new /= bg_height
                w_new /= bg_width
                h_new /= bg_height

                new_annotations.append(f"{int(cls)} {x_new:.6f} {y_new:.6f} {w_new:.6f} {h_new:.6f}\n")

            # Save updated labels
            with open(output_label_path, "w") as f:
                f.writelines(new_annotations)

print("âœ… Background replacement & YOLO annotations update completed! Output saved in 'output/'")
